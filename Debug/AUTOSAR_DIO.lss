
AUTOSAR_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000370  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  000003e4  2**0
                  ALLOC
  2 .stab         000007f8  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000087f  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  74:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Det_ReportError>:

void Det_ReportError( uint16 ModuleId,
                      uint8 InstanceId,
                      uint8 ApiId,
					  uint8 ErrorId )
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <Det_ReportError+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <Det_ReportError+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6b 83       	std	Y+3, r22	; 0x03
  90:	4c 83       	std	Y+4, r20	; 0x04
  92:	2d 83       	std	Y+5, r18	; 0x05
  94:	ff cf       	rjmp	.-2      	; 0x94 <Det_ReportError+0x18>

00000096 <Dio_Init>:
STATIC Dio_PortType *Dio_Ports = NULL_PTR;
STATIC Dio_ChannelGroupType *Dio_ChannelGroups  = NULL_PTR;
STATIC uint8 Dio_Status = DIO_NOT_INITIALIZED;

void Dio_Init(const Dio_ConfigType * ConfigPtr)
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <Dio_Init+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	41 f4       	brne	.+16     	; 0xbc <Dio_Init+0x26>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_INIT_SID,
  ac:	88 e7       	ldi	r24, 0x78	; 120
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	40 e1       	ldi	r20, 0x10	; 16
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <Det_ReportError>
  ba:	17 c0       	rjmp	.+46     	; 0xea <Dio_Init+0x54>
	{
		/*
		 * Set the module state to initialized and point to the PB configuration structure using a global pointer.
		 * This global pointer is global to be used by other functions to read the PB configuration structures
		 */
		Dio_Status       = DIO_INITIALIZED;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 66 00 	sts	0x0066, r24
		Dio_PortChannels = ConfigPtr->Channels; /* address of the first Channels structure --> Channels[0] */
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	90 93 61 00 	sts	0x0061, r25
  ca:	80 93 60 00 	sts	0x0060, r24
		Dio_Ports = ConfigPtr->ports;
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	08 96       	adiw	r24, 0x08	; 8
  d4:	90 93 63 00 	sts	0x0063, r25
  d8:	80 93 62 00 	sts	0x0062, r24
		Dio_ChannelGroups = ConfigPtr->groups;
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	0a 96       	adiw	r24, 0x0a	; 10
  e2:	90 93 65 00 	sts	0x0065, r25
  e6:	80 93 64 00 	sts	0x0064, r24

	}
}
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <Dio_ReadChannel>:


Dio_LevelType Dio_ReadChannel (Dio_ChannelType ChannelId)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	27 97       	sbiw	r28, 0x07	; 7
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	8d 83       	std	Y+5, r24	; 0x05
	Dio_PortLevelType *PORT_ptr =NULL;
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	1b 82       	std	Y+3, r1	; 0x03
	uint8 errorState = E_OK;
 10e:	1a 82       	std	Y+2, r1	; 0x02
	Dio_LevelType output = STD_LOW;
 110:	19 82       	std	Y+1, r1	; 0x01
	if(ChannelId > DIO_CONFIGURED_CHANNLES)
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	85 30       	cpi	r24, 0x05	; 5
 116:	10 f0       	brcs	.+4      	; 0x11c <Dio_ReadChannel+0x28>
	{
		errorState=E_NOT_OK;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		//do nothing
	}
	if(errorState ==E_OK)
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	88 23       	and	r24, r24
 120:	09 f0       	breq	.+2      	; 0x124 <Dio_ReadChannel+0x30>
 122:	65 c0       	rjmp	.+202    	; 0x1ee <Dio_ReadChannel+0xfa>
	{
		switch(Dio_PortChannels[ChannelId].Port_Num)
 124:	20 91 60 00 	lds	r18, 0x0060
 128:	30 91 61 00 	lds	r19, 0x0061
 12c:	8d 81       	ldd	r24, Y+5	; 0x05
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	f9 01       	movw	r30, r18
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	80 81       	ld	r24, Z
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	3f 83       	std	Y+7, r19	; 0x07
 144:	2e 83       	std	Y+6, r18	; 0x06
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	9f 81       	ldd	r25, Y+7	; 0x07
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	d1 f0       	breq	.+52     	; 0x184 <Dio_ReadChannel+0x90>
 150:	2e 81       	ldd	r18, Y+6	; 0x06
 152:	3f 81       	ldd	r19, Y+7	; 0x07
 154:	22 30       	cpi	r18, 0x02	; 2
 156:	31 05       	cpc	r19, r1
 158:	2c f4       	brge	.+10     	; 0x164 <Dio_ReadChannel+0x70>
 15a:	8e 81       	ldd	r24, Y+6	; 0x06
 15c:	9f 81       	ldd	r25, Y+7	; 0x07
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	61 f0       	breq	.+24     	; 0x17a <Dio_ReadChannel+0x86>
 162:	1f c0       	rjmp	.+62     	; 0x1a2 <Dio_ReadChannel+0xae>
 164:	2e 81       	ldd	r18, Y+6	; 0x06
 166:	3f 81       	ldd	r19, Y+7	; 0x07
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	31 05       	cpc	r19, r1
 16c:	81 f0       	breq	.+32     	; 0x18e <Dio_ReadChannel+0x9a>
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
 170:	9f 81       	ldd	r25, Y+7	; 0x07
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	91 05       	cpc	r25, r1
 176:	81 f0       	breq	.+32     	; 0x198 <Dio_ReadChannel+0xa4>
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <Dio_ReadChannel+0xae>
		{
		case 0: PORT_ptr=&PINA_REG;break;
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9c 83       	std	Y+4, r25	; 0x04
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <Dio_ReadChannel+0xb2>
		case 1: PORT_ptr=&PINB_REG;break;
 184:	86 e3       	ldi	r24, 0x36	; 54
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	0c c0       	rjmp	.+24     	; 0x1a6 <Dio_ReadChannel+0xb2>
		case 2: PORT_ptr=&PINC_REG;break;
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 83       	std	Y+4, r25	; 0x04
 194:	8b 83       	std	Y+3, r24	; 0x03
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <Dio_ReadChannel+0xb2>
		case 3: PORT_ptr=&PIND_REG;break;
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9c 83       	std	Y+4, r25	; 0x04
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_ReadChannel+0xb2>
		default:errorState=E_NOT_OK;break;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(GET_BIT(*PORT_ptr,Dio_PortChannels[ChannelId].Ch_Num)==1)
 1a6:	eb 81       	ldd	r30, Y+3	; 0x03
 1a8:	fc 81       	ldd	r31, Y+4	; 0x04
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	20 91 60 00 	lds	r18, 0x0060
 1b4:	30 91 61 00 	lds	r19, 0x0061
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	f9 01       	movw	r30, r18
 1c4:	e8 0f       	add	r30, r24
 1c6:	f9 1f       	adc	r31, r25
 1c8:	81 81       	ldd	r24, Z+1	; 0x01
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	9a 01       	movw	r18, r20
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_ReadChannel+0xe2>
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_ReadChannel+0xde>
 1da:	c9 01       	movw	r24, r18
 1dc:	81 70       	andi	r24, 0x01	; 1
 1de:	90 70       	andi	r25, 0x00	; 0
 1e0:	88 23       	and	r24, r24
 1e2:	19 f0       	breq	.+6      	; 0x1ea <Dio_ReadChannel+0xf6>
		{
			output =STD_HIGH;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_ReadChannel+0xfa>
		{
			output =STD_LOW;
		}
		else
		{
			errorState=E_NOT_OK;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8a 83       	std	Y+2, r24	; 0x02
		}
	}
	return output;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 1f0:	27 96       	adiw	r28, 0x07	; 7
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	cf 91       	pop	r28
 1fe:	df 91       	pop	r29
 200:	08 95       	ret

00000202 <Dio_WriteChannel>:

void Dio_WriteChannel (Dio_ChannelType ChannelId,Dio_LevelType Level)
{
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	28 97       	sbiw	r28, 0x08	; 8
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	8d 83       	std	Y+5, r24	; 0x05
 218:	6e 83       	std	Y+6, r22	; 0x06
	Dio_PortLevelType *PORT_ptr =NULL;
 21a:	1c 82       	std	Y+4, r1	; 0x04
 21c:	1b 82       	std	Y+3, r1	; 0x03
		uint8 errorState = E_OK;
 21e:	1a 82       	std	Y+2, r1	; 0x02
		Dio_LevelType output = STD_LOW;
 220:	19 82       	std	Y+1, r1	; 0x01
		if(ChannelId > DIO_CONFIGURED_CHANNLES)
 222:	8d 81       	ldd	r24, Y+5	; 0x05
 224:	85 30       	cpi	r24, 0x05	; 5
 226:	10 f0       	brcs	.+4      	; 0x22c <Dio_WriteChannel+0x2a>
		{
			errorState=E_NOT_OK;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8a 83       	std	Y+2, r24	; 0x02
		}
		else
		{
			//do nothing
		}
		if(errorState ==E_OK)
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	88 23       	and	r24, r24
 230:	09 f0       	breq	.+2      	; 0x234 <Dio_WriteChannel+0x32>
 232:	8a c0       	rjmp	.+276    	; 0x348 <Dio_WriteChannel+0x146>
		{
			switch(Dio_PortChannels[ChannelId].Port_Num)
 234:	20 91 60 00 	lds	r18, 0x0060
 238:	30 91 61 00 	lds	r19, 0x0061
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	f9 01       	movw	r30, r18
 248:	e8 0f       	add	r30, r24
 24a:	f9 1f       	adc	r31, r25
 24c:	80 81       	ld	r24, Z
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	38 87       	std	Y+8, r19	; 0x08
 254:	2f 83       	std	Y+7, r18	; 0x07
 256:	8f 81       	ldd	r24, Y+7	; 0x07
 258:	98 85       	ldd	r25, Y+8	; 0x08
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	d1 f0       	breq	.+52     	; 0x294 <Dio_WriteChannel+0x92>
 260:	2f 81       	ldd	r18, Y+7	; 0x07
 262:	38 85       	ldd	r19, Y+8	; 0x08
 264:	22 30       	cpi	r18, 0x02	; 2
 266:	31 05       	cpc	r19, r1
 268:	2c f4       	brge	.+10     	; 0x274 <Dio_WriteChannel+0x72>
 26a:	8f 81       	ldd	r24, Y+7	; 0x07
 26c:	98 85       	ldd	r25, Y+8	; 0x08
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	61 f0       	breq	.+24     	; 0x28a <Dio_WriteChannel+0x88>
 272:	1f c0       	rjmp	.+62     	; 0x2b2 <Dio_WriteChannel+0xb0>
 274:	2f 81       	ldd	r18, Y+7	; 0x07
 276:	38 85       	ldd	r19, Y+8	; 0x08
 278:	22 30       	cpi	r18, 0x02	; 2
 27a:	31 05       	cpc	r19, r1
 27c:	81 f0       	breq	.+32     	; 0x29e <Dio_WriteChannel+0x9c>
 27e:	8f 81       	ldd	r24, Y+7	; 0x07
 280:	98 85       	ldd	r25, Y+8	; 0x08
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	91 05       	cpc	r25, r1
 286:	81 f0       	breq	.+32     	; 0x2a8 <Dio_WriteChannel+0xa6>
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <Dio_WriteChannel+0xb0>
			{
			case 0: PORT_ptr=&PORTA_REG;break;
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9c 83       	std	Y+4, r25	; 0x04
 290:	8b 83       	std	Y+3, r24	; 0x03
 292:	11 c0       	rjmp	.+34     	; 0x2b6 <Dio_WriteChannel+0xb4>
			case 1: PORT_ptr=&PORTB_REG;break;
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9c 83       	std	Y+4, r25	; 0x04
 29a:	8b 83       	std	Y+3, r24	; 0x03
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <Dio_WriteChannel+0xb4>
			case 2: PORT_ptr=&PORTC_REG;break;
 29e:	85 e3       	ldi	r24, 0x35	; 53
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9c 83       	std	Y+4, r25	; 0x04
 2a4:	8b 83       	std	Y+3, r24	; 0x03
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <Dio_WriteChannel+0xb4>
	    	case 3: PORT_ptr=&PORTD_REG;break;
 2a8:	82 e3       	ldi	r24, 0x32	; 50
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9c 83       	std	Y+4, r25	; 0x04
 2ae:	8b 83       	std	Y+3, r24	; 0x03
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <Dio_WriteChannel+0xb4>
			default:errorState=E_NOT_OK;break;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	8a 83       	std	Y+2, r24	; 0x02
			}
			if(Level == STD_HIGH)
 2b6:	8e 81       	ldd	r24, Y+6	; 0x06
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	01 f5       	brne	.+64     	; 0x2fc <Dio_WriteChannel+0xfa>
			{
				SET_BIT(*PORT_ptr,Dio_PortChannels[ChannelId].Ch_Num);
 2bc:	eb 81       	ldd	r30, Y+3	; 0x03
 2be:	fc 81       	ldd	r31, Y+4	; 0x04
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	20 91 60 00 	lds	r18, 0x0060
 2c8:	30 91 61 00 	lds	r19, 0x0061
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	f9 01       	movw	r30, r18
 2d8:	e8 0f       	add	r30, r24
 2da:	f9 1f       	adc	r31, r25
 2dc:	81 81       	ldd	r24, Z+1	; 0x01
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <Dio_WriteChannel+0xec>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <Dio_WriteChannel+0xe8>
 2f2:	84 2b       	or	r24, r20
 2f4:	eb 81       	ldd	r30, Y+3	; 0x03
 2f6:	fc 81       	ldd	r31, Y+4	; 0x04
 2f8:	80 83       	st	Z, r24
 2fa:	26 c0       	rjmp	.+76     	; 0x348 <Dio_WriteChannel+0x146>
			}
			else if(Level ==STD_LOW)
 2fc:	8e 81       	ldd	r24, Y+6	; 0x06
 2fe:	88 23       	and	r24, r24
 300:	09 f5       	brne	.+66     	; 0x344 <Dio_WriteChannel+0x142>
			{
				CLR_BIT(*PORT_ptr,Dio_PortChannels[ChannelId].Ch_Num);
 302:	eb 81       	ldd	r30, Y+3	; 0x03
 304:	fc 81       	ldd	r31, Y+4	; 0x04
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	20 91 60 00 	lds	r18, 0x0060
 30e:	30 91 61 00 	lds	r19, 0x0061
 312:	8d 81       	ldd	r24, Y+5	; 0x05
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	f9 01       	movw	r30, r18
 31e:	e8 0f       	add	r30, r24
 320:	f9 1f       	adc	r31, r25
 322:	81 81       	ldd	r24, Z+1	; 0x01
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <Dio_WriteChannel+0x132>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <Dio_WriteChannel+0x12e>
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	eb 81       	ldd	r30, Y+3	; 0x03
 33e:	fc 81       	ldd	r31, Y+4	; 0x04
 340:	80 83       	st	Z, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <Dio_WriteChannel+0x146>
			}
			else
			{
				errorState=E_NOT_OK;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	8a 83       	std	Y+2, r24	; 0x02
			}
		}
}
 348:	28 96       	adiw	r28, 0x08	; 8
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	08 95       	ret

0000035a <main>:
#include "Compiler.h"
#include "Dio_regs.h"


int main()
{
 35a:	df 93       	push	r29
 35c:	cf 93       	push	r28
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
	

}
 366:	cf 91       	pop	r28
 368:	df 91       	pop	r29
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
